// popup/popup.js

class HorizonPopup {
  constructor() {
    this.settings = {
      enabled: true,
      theme: 'light',
      animations: true,
      accentColor: '#4318FF',
      compactMode: false,
      autoDetect: true,
      customCSS: '',
      performance: 'balanced'
    };
    
    this.stats = {
      transformedPages: 0,
      lastUsed: null,
      totalSessions: 0
    };
    
    this.init();
  }

  async init() {
    await this.loadSettings();
    await this.loadStats();
    this.setupUI();
    this.bindEvents();
    this.checkCurrentTab();
    this.startStatsUpdate();
  }

  async loadSettings() {
    try {
      const result = await chrome.storage.sync.get(['horizonSettings']);
      if (result.horizonSettings) {
        this.settings = { ...this.settings, ...result.horizonSettings };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  }

  async loadStats() {
    try {
      const result = await chrome.storage.local.get(['horizonStats']);
      if (result.horizonStats) {
        this.stats = { ...this.stats, ...result.horizonStats };
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  async saveSettings() {
    try {
      await chrome.storage.sync.set({ horizonSettings: this.settings });
      await this.updateContentScript();
      this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!', 'success');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      this.showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
    }
  }

  async saveStats() {
    try {
      await chrome.storage.local.set({ horizonStats: this.stats });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  setupUI() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const header = document.querySelector('.popup-header');
    header.innerHTML = `
      <h3>Horizon UI for 1C</h3>
      <div class="subtitle">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è 1C:–ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ</div>
    `;

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
    this.createStatusIndicator();
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.populateSettings();
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    this.createStatsSection();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ UI
    this.applySettingsToUI();
  }

  createStatusIndicator() {
    const content = document.querySelector('.popup-content');
    const statusHTML = `
      <div class="status-indicator ${this.settings.enabled ? 'active' : 'inactive'}" id="statusIndicator">
        <span class="status-icon">${this.settings.enabled ? '‚úÖ' : '‚ùå'}</span>
        <span id="statusText">${this.settings.enabled ? 'Horizon UI –∞–∫—Ç–∏–≤–µ–Ω' : 'Horizon UI –æ—Ç–∫–ª—é—á–µ–Ω'}</span>
      </div>
    `;
    content.insertAdjacentHTML('afterbegin', statusHTML);
  }

  populateSettings() {
    const content = document.querySelector('.popup-content');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const mainSettingsHTML = `
      <div class="setting-section">
        <div class="section-title">
          <span class="section-icon">‚öôÔ∏è</span>
          –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        </div>
        
        <div class="setting-item">
          <label class="toggle-switch">
            <input type="checkbox" id="enableHorizon" ${this.settings.enabled ? 'checked' : ''}>
            <span class="slider"></span>
          </label>
          <div class="setting-label">
            –í–∫–ª—é—á–∏—Ç—å Horizon UI
            <div class="setting-description">–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å 1C –ø–æ–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω</div>
          </div>
        </div>
        
        <div class="setting-item">
          <span class="setting-label">–¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</span>
          <div class="custom-select">
            <select id="themeSelect">
              <option value="light" ${this.settings.theme === 'light' ? 'selected' : ''}>–°–≤–µ—Ç–ª–∞—è</option>
              <option value="dark" ${this.settings.theme === 'dark' ? 'selected' : ''}>–¢–µ–º–Ω–∞—è</option>
              <option value="auto" ${this.settings.theme === 'auto' ? 'selected' : ''}>–ê–≤—Ç–æ</option>
            </select>
          </div>
        </div>
        
        <div class="setting-item">
          <label class="toggle-switch">
            <input type="checkbox" id="enableAnimations" ${this.settings.animations ? 'checked' : ''}>
            <span class="slider"></span>
          </label>
          <div class="setting-label">
            –ê–Ω–∏–º–∞—Ü–∏–∏
            <div class="setting-description">–ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã</div>
          </div>
        </div>
      </div>
    `;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const advancedSettingsHTML = `
      <div class="setting-section">
        <div class="section-title">
          <span class="section-icon">üé®</span>
          –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
        </div>
        
        <div class="setting-item">
          <div class="setting-label">–ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç</div>
          <div class="color-picker">
            <div class="color-option ${this.settings.accentColor === '#4318FF' ? 'selected' : ''}" 
                 style="background: #4318FF" data-color="#4318FF"></div>
            <div class="color-option ${this.settings.accentColor === '#7551FF' ? 'selected' : ''}" 
                 style="background: #7551FF" data-color="#7551FF"></div>
            <div class="color-option ${this.settings.accentColor === '#48BB78' ? 'selected' : ''}" 
                 style="background: #48BB78" data-color="#48BB78"></div>
            <div class="color-option ${this.settings.accentColor === '#ED8936' ? 'selected' : ''}" 
                 style="background: #ED8936" data-color="#ED8936"></div>
            <div class="color-option ${this.settings.accentColor === '#F56565' ? 'selected' : ''}" 
                 style="background: #F56565" data-color="#F56565"></div>
          </div>
        </div>
        
        <div class="setting-item">
          <label class="toggle-switch">
            <input type="checkbox" id="compactMode" ${this.settings.compactMode ? 'checked' : ''}>
            <span class="slider"></span>
          </label>
          <div class="setting-label">
            –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
            <div class="setting-description">–£–º–µ–Ω—å—à–µ–Ω–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–∑–º–µ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
          </div>
        </div>
      </div>
    `;
    
    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const performanceSettingsHTML = `
      <div class="setting-section">
        <div class="section-title">
          <span class="section-icon">‚ö°</span>
          –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        </div>
        
        <div class="setting-item">
          <span class="setting-label">–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</span>
          <div class="custom-select">
            <select id="performanceSelect">
              <option value="high" ${this.settings.performance === 'high' ? 'selected' : ''}>–í—ã—Å–æ–∫–∞—è</option>
              <option value="balanced" ${this.settings.performance === 'balanced' ? 'selected' : ''}>–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è</option>
              <option value="battery" ${this.settings.performance === 'battery' ? 'selected' : ''}>–≠–∫–æ–Ω–æ–º–∏—è –±–∞—Ç–∞—Ä–µ–∏</option>
            </select>
          </div>
        </div>
        
        <div class="setting-item">
          <label class="toggle-switch">
            <input type="checkbox" id="autoDetect" ${this.settings.autoDetect ? 'checked' : ''}>
            <span class="slider"></span>
          </label>
          <div class="setting-label">
            –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ 1C
            <div class="setting-description">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1C</div>
          </div>
        </div>
      </div>
    `;
    
    content.insertAdjacentHTML('beforeend', mainSettingsHTML);
    content.insertAdjacentHTML('beforeend', advancedSettingsHTML);
    content.insertAdjacentHTML('beforeend', performanceSettingsHTML);
  }

  createStatsSection() {
    const content = document.querySelector('.popup-content');
    const statsHTML = `
      <div class="setting-section">
        <div class="section-title">
          <span class="section-icon">üìä</span>
          –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        </div>
        
        <div class="stats-grid">
          <div class="stat-item">
            <div class="stat-value" id="transformedCount">${this.stats.transformedPages}</div>
            <div class="stat-label">–°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
          </div>
          <div class="stat-item">
            <div class="stat-value" id="sessionCount">${this.stats.totalSessions}</div>
            <div class="stat-label">–°–µ—Å—Å–∏–π</div>
          </div>
        </div>
        
        <div class="setting-item">
          <span class="setting-label">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: 
            <span id="lastUsed">${this.formatLastUsed()}</span>
          </span>
        </div>
      </div>
    `;
    
    content.insertAdjacentHTML('beforeend', statsHTML);
  }

  bindEvents() {
    // –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
    document.getElementById('enableHorizon').addEventListener('change', (e) => {
      this.settings.enabled = e.target.checked;
      this.updateStatusIndicator();
      this.saveSettings();
    });

    // –¢–µ–º–∞
    document.getElementById('themeSelect').addEventListener('change', (e) => {
      this.settings.theme = e.target.value;
      this.saveSettings();
    });

    // –ê–Ω–∏–º–∞—Ü–∏–∏
    document.getElementById('enableAnimations').addEventListener('change', (e) => {
      this.settings.animations = e.target.checked;
      this.saveSettings();
    });

    // –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    document.getElementById('compactMode').addEventListener('change', (e) => {
      this.settings.compactMode = e.target.checked;
      this.saveSettings();
    });

    // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    document.getElementById('autoDetect').addEventListener('change', (e) => {
      this.settings.autoDetect = e.target.checked;
      this.saveSettings();
    });

    // –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    document.getElementById('performanceSelect').addEventListener('change', (e) => {
      this.settings.performance = e.target.value;
      this.saveSettings();
    });

    // –¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞
    document.querySelectorAll('.color-option').forEach(option => {
      option.addEventListener('click', (e) => {
        document.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('selected'));
        e.target.classList.add('selected');
        this.settings.accentColor = e.target.dataset.color;
        this.saveSettings();
      });
    });

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    this.createActionButtons();
  }

  createActionButtons() {
    const content = document.querySelector('.popup-content');
    const actionsHTML = `
      <div class="popup-actions">
        <button id="saveSettings" class="btn btn-primary">
          <span>üíæ</span>
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </button>
        <button id="resetSettings" class="btn btn-secondary">
          <span>üîÑ</span>
          –°–±—Ä–æ—Å
        </button>
        <button id="exportSettings" class="btn btn-secondary">
          <span>üì§</span>
          –≠–∫—Å–ø–æ—Ä—Ç
        </button>
      </div>
      
      <div class="popup-actions" style="margin-top: 12px;">
        <button id="refreshPage" class="btn btn-secondary">
          <span>üîÑ</span>
          –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
        </button>
        <button id="clearStats" class="btn btn-danger">
          <span>üóëÔ∏è</span>
          –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        </button>
      </div>
    `;
    
    content.insertAdjacentHTML('beforeend', actionsHTML);

    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫ –∫–Ω–æ–ø–∫–∞–º
    document.getElementById('saveSettings').addEventListener('click', () => {
      this.saveSettings();
    });

    document.getElementById('resetSettings').addEventListener('click', () => {
      this.resetSettings();
    });

    document.getElementById('exportSettings').addEventListener('click', () => {
      this.exportSettings();
    });

    document.getElementById('refreshPage').addEventListener('click', () => {
      this.refreshCurrentTab();
    });

    document.getElementById('clearStats').addEventListener('click', () => {
      this.clearStats();
    });
  }

  updateStatusIndicator() {
    const indicator = document.getElementById('statusIndicator');
    const statusText = document.getElementById('statusText');
    const statusIcon = indicator.querySelector('.status-icon');
    
    if (this.settings.enabled) {
      indicator.className = 'status-indicator active';
      statusIcon.textContent = '‚úÖ';
      statusText.textContent = 'Horizon UI –∞–∫—Ç–∏–≤–µ–Ω';
    } else {
      indicator.className = 'status-indicator inactive';
      statusIcon.textContent = '‚ùå';
      statusText.textContent = 'Horizon UI –æ—Ç–∫–ª—é—á–µ–Ω';
    }
  }

  async updateContentScript() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      if (tab) {
        await chrome.tabs.sendMessage(tab.id, {
          action: 'updateSettings',
          settings: this.settings
        });
      }
    } catch (error) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å content script:', error);
    }
  }

  async checkCurrentTab() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      if (tab && this.is1CUrl(tab.url)) {
        this.stats.lastUsed = new Date().toISOString();
        this.saveStats();
        document.getElementById('lastUsed').textContent = this.formatLastUsed();
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏:', error);
    }
  }

  is1CUrl(url) {
    const patterns = [
      '/hs/v8reader/',
      'clobus.uz',
      '1cfresh.com',
      'localhost'
    ];
    return patterns.some(pattern => url.includes(pattern));
  }

  formatLastUsed() {
    if (!this.stats.lastUsed) return '–ù–∏–∫–æ–≥–¥–∞';
    
    const date = new Date(this.stats.lastUsed);
    const now = new Date();
    const diff = now - date;
    
    if (diff < 60000) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diff < 3600000) return `${Math.floor(diff / 60000)} –º–∏–Ω –Ω–∞–∑–∞–¥`;
    if (diff < 86400000) return `${Math.floor(diff / 3600000)} —á –Ω–∞–∑–∞–¥`;
    
    return date.toLocaleDateString('ru-RU');
  }

  async resetSettings() {
    if (confirm('–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
      this.settings = {
        enabled: true,
        theme: 'light',
        animations: true,
        accentColor: '#4318FF',
        compactMode: false,
        autoDetect: true,
        customCSS: '',
        performance: 'balanced'
      };
      
      await this.saveSettings();
      location.reload();
    }
  }

  exportSettings() {
    const dataStr = JSON.stringify(this.settings, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'horizon-ui-settings.json';
    link.click();
    
    URL.revokeObjectURL(url);
    this.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!', 'success');
  }

  async refreshCurrentTab() {
    try {
      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
      if (tab) {
        await chrome.tabs.reload(tab.id);
        this.showNotification('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', 'success');
        window.close();
      }
    } catch (error) {
      this.showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã', 'error');
    }
  }

  async clearStats() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?')) {
      this.stats = {
        transformedPages: 0,
        lastUsed: null,
        totalSessions: 0
      };
      
      await this.saveStats();
      document.getElementById('transformedCount').textContent = '0';
      document.getElementById('sessionCount').textContent = '0';
      document.getElementById('lastUsed').textContent = '–ù–∏–∫–æ–≥–¥–∞';
      
      this.showNotification('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞!', 'success');
    }
  }

  applySettingsToUI() {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç
    document.documentElement.style.setProperty('--accent-color', this.settings.accentColor);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    if (this.settings.theme === 'dark') {
      document.body.classList.add('dark-theme');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    if (this.settings.compactMode) {
      document.body.classList.add('compact-mode');
    }
  }

  startStatsUpdate() {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      this.checkCurrentTab();
    }, 30000);
  }

  showNotification(message, type = 'success') {
    // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    document.querySelectorAll('.notification').forEach(n => n.remove());
    
    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => notification.classList.add('show'), 100);
    
    // –°–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º popup –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
  new HorizonPopup();
});

// –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
document.addEventListener('DOMContentLoaded', () => {
  document.body.classList.add('fade-in');
});